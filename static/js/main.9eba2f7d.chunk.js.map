{"version":3,"sources":["assets/thanos_snap.png","assets/thanos_snap_sound.mp3","Themes/Colors.js","components/Character/Character.js","Themes/GlobalStyles.js","components/ThanosGauntlet/ThanosGauntlet.js","components/CharactersWrapper/CharactersWrapper.js","views/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","avengers","rotateAround","keyframes","_templateObject","StyledWrapper","styled","div","_templateObject2","_ref","dead","ImgWrapper","_templateObject3","_ref2","css","_templateObject4","StyledImg","img","_templateObject5","TextWrapper","_templateObject6","Character","_ref3","name","react_default","a","createElement","src","displayName","GlobalStyles","createGlobalStyle","GlobalStyles_templateObject","snap","ThanosGauntlet_templateObject","button","ThanosGauntlet_templateObject2","Gauntlet","animate","ThanosGauntlet","click","ThanosGauntlet_StyledWrapper","onClick","section","CharactersWrapper_templateObject","CharactersWrapper","children","CharactersWrapper_StyledWrapper","charactersURL","concat","App","state","characters","snapSound","Audio","snapsound","handleDataFetch","localStorage","getItem","console","log","_this","setState","JSON","parse","fetch","method","then","response","json","data","mappedCharacters","results","forEach","char","setItem","stringify","catch","err","killCharacter","deadQuantity","Math","floor","random","length","setTimeout","halfTheCharacters","alive","filter","character","handleGauntletClick","prevState","Object","objectSpread","this","_this$state","charactersNew","map","id","characterName","replace","components_Character_Character","key","thumbnail","path","extension","data-test","Fragment","Themes_GlobalStyles","components_ThanosGauntlet_ThanosGauntlet","components_CharactersWrapper_CharactersWrapper","React","Component","ReactDOM","render","views_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.9eba2f7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thanos_snap.3a36d79c.png\";","module.exports = __webpack_public_path__ + \"static/media/thanos_snap_sound.b746c7d7.mp3\";","const colors = {\r\n  avengers: 'hsla(180, 85%, 40%, 0.8)',\r\n};\r\nexport default colors;\r\n","import React from 'react';\r\nimport styled, { keyframes, css } from 'styled-components';\r\nimport colors from 'Themes/Colors';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst rotateAround = keyframes`\r\n  from {\r\n    transform: translate(-50%, -50%) rotate(0deg) ;\r\n  }\r\n  to {\r\n    transform: translate(-50%, -50%) rotate(360deg) ;\r\n  }\r\n`;\r\n\r\nconst StyledWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: transparent;\r\n  width: 150px;\r\n  height: 150px;\r\n  color: ${colors.avengers};\r\n  margin: 10px;\r\n  position: relative;\r\n  filter: ${({ dead }) => (dead ? 'grayscale(100%);' : 'grayscale(0)')};\r\n  transition: filter 5s;\r\n`;\r\nconst ImgWrapper = styled.div`\r\n  height: 100px;\r\n  width: 100px;\r\n  position: relative;\r\n  border-radius: 50%;\r\n  box-shadow: 0px 0px 5px 2px #12a0a0, inset 0px 0px 5px 2px #12a0a0;\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: calc(100% + 5px);\r\n    height: calc(100% + 5px);\r\n    border: 5px transparent solid;\r\n    border-top: 4px ${colors.avengers} solid;\r\n    border-radius: 50%;\r\n    transition: 2s;\r\n    animation: 5s ${rotateAround} linear infinite reverse;\r\n  }\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: calc(100% + 16px);\r\n    height: calc(100% + 16px);\r\n    border: 5px transparent solid;\r\n    border-bottom: 4px ${colors.avengers} solid;\r\n    border-radius: 50%;\r\n    transition: 2s;\r\n    animation: 4s ${rotateAround} linear infinite;\r\n  }\r\n  ${({ dead }) =>\r\n    dead &&\r\n    css`\r\n      &::after {\r\n        animation-play-state: paused;\r\n      }\r\n      &::before {\r\n        animation-play-state: paused;\r\n      }\r\n    `};\r\n`;\r\nconst StyledImg = styled.img`\r\n  border-radius: 50%;\r\n`;\r\nconst TextWrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-top: 9px;\r\n  text-transform: uppercase;\r\n  font-size: 0.8em;\r\n`;\r\nconst Character = ({ img, name, dead }) => (\r\n  <StyledWrapper dead={dead}>\r\n    <ImgWrapper dead={dead}>\r\n      <StyledImg src={img} />\r\n    </ImgWrapper>\r\n    <TextWrapper>\r\n      <h2>{name}</h2>\r\n    </TextWrapper>\r\n  </StyledWrapper>\r\n);\r\n\r\nCharacter.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  img: PropTypes.string.isRequired,\r\n};\r\n\r\nCharacter.displayName = 'CharacterComponent';\r\nStyledImg.displayName = 'StyledImg';\r\nexport default Character;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css?family=Inconsolata&display=swap');\r\n*, *::after, *::before{\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\nhtml{\r\n    font-size: 62.5%\r\n}\r\nbody{\r\n    background-color: #222222;\r\n    font-size: 1.6em;\r\n    font-family: 'Inconsolata', monospace;\r\n}\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport Gauntlet from 'assets/thanos_snap.png';\r\n// 3840x80  48\r\nconst snap = keyframes`\r\nfrom{\r\n    background-position: 0px 0px;\r\n}\r\nto{\r\n    background-position:  -3840px 0px;\r\n    }\r\n`;\r\n\r\nconst StyledWrapper = styled.button`\r\n  height: 80px;\r\n  width: 80px;\r\n  background: url(${Gauntlet}) 0px 0px;\r\n  margin: 2vh 0 5vh 50%;\r\n  transform: translateX(-50%);\r\n  animation: ${({ animate }) => (animate ? snap : 'none')} 2.5s steps(48);\r\n  cursor: pointer;\r\n  border: none;\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst ThanosGauntlet = ({ click, animate }) => <StyledWrapper animate={animate} onClick={click} />;\r\n\r\nThanosGauntlet.propTypes = {\r\n  click: PropTypes.func.isRequired,\r\n  animate: PropTypes.bool.isRequired,\r\n};\r\n\r\nThanosGauntlet.displayName = 'ThanosGauntlet';\r\n\r\nexport default ThanosGauntlet;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.section`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n\r\n  @media (max-width: 360px) {\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst CharactersWrapper = ({ children }) => <StyledWrapper>{children}</StyledWrapper>;\r\n\r\nexport default CharactersWrapper;\r\n","import React from 'react';\r\nimport Character from 'components/Character/Character';\r\nimport GlobalStyles from 'Themes/GlobalStyles';\r\nimport ThanosGauntlet from 'components/ThanosGauntlet/ThanosGauntlet';\r\nimport CharactersWrapper from 'components/CharactersWrapper/CharactersWrapper';\r\nimport snapsound from 'assets/thanos_snap_sound.mp3';\r\n\r\nconst publicKey = '7fdc3b3b1bb5e7cf21e75d9f18527565';\r\nconst charactersURL = `http://gateway.marvel.com/v1/public/events/29/characters?limit=58&ts=1&apikey=${publicKey}&hash=72402047ce00fbd113138a43ff0c86ad`;\r\n\r\nclass App extends React.Component {\r\n  state = { characters: [], animate: false };\r\n\r\n  snapSound = new Audio(snapsound);\r\n\r\n  componentDidMount() {\r\n    this.handleDataFetch();\r\n  }\r\n\r\n  handleDataFetch = () => {\r\n    if (localStorage.getItem('charactersData')) {\r\n      console.log(localStorage.getItem('charactersData'));\r\n      this.setState({\r\n        characters: JSON.parse(localStorage.getItem('charactersData')),\r\n      });\r\n    }\r\n    fetch(charactersURL, { method: 'GET' })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const mappedCharacters = data.data.results;\r\n        mappedCharacters.forEach(char => (char.dead = false));\r\n        localStorage.setItem('charactersData', JSON.stringify(mappedCharacters));\r\n        console.log(data.data.results);\r\n        this.setState({\r\n          characters: mappedCharacters,\r\n        });\r\n      })\r\n      .catch(err => console.log('something gone wrong:  ', err));\r\n  };\r\n\r\n  killCharacter = deadQuantity => {\r\n    const { characters } = this.state;\r\n    if (deadQuantity > 0) {\r\n      const index = Math.floor(Math.random() * characters.length);\r\n      const chosenOne = characters[index];\r\n      chosenOne.dead = true;\r\n      this.setState({\r\n        characters,\r\n      });\r\n      setTimeout(() => {\r\n        this.killCharacter(deadQuantity - 1);\r\n      }, 1000);\r\n    } else {\r\n      this.setState({\r\n        animate: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  halfTheCharacters = () => {\r\n    const alive = this.state.characters.filter(character => character.dead === false);\r\n    const deadQuantity = Math.floor(alive.length / 2);\r\n\r\n    setTimeout(() => {\r\n      this.killCharacter(deadQuantity);\r\n    }, 1000);\r\n  };\r\n\r\n  handleGauntletClick = () => {\r\n    const { animate } = this.state;\r\n    if (!animate) {\r\n      // this.snapSound.play();\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        animate: !prevState.animate,\r\n      }));\r\n      this.halfTheCharacters();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { animate, characters } = this.state;\r\n    const charactersNew = characters.map(character => {\r\n      if (character.id !== 1009726 && character.id !== 1009165 && character.id !== 1009299) {\r\n        const characterName = character.name.replace(/\\(.*\\)/, '');\r\n        return (\r\n          <Character\r\n            name={characterName}\r\n            key={character.id}\r\n            img={`${character.thumbnail.path}/standard_medium.${character.thumbnail.extension}`}\r\n            dead={character.dead}\r\n            data-test=\"character-component\"\r\n          />\r\n        );\r\n      }\r\n    });\r\n    return (\r\n      <>\r\n        <GlobalStyles />\r\n        <ThanosGauntlet click={this.handleGauntletClick} animate={animate} />\r\n        <CharactersWrapper>{charactersNew}</CharactersWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'views/App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}